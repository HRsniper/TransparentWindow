# Constantes utilizadas pelas fun√ß√µes da API do Windows
$GWL_EXSTYLE = -20                # √çndice para estilo estendido da janela
$WS_EX_LAYERED = 0x80000          # Permite aplicar efeitos visuais como transpar√™ncia
$WS_EX_TRANSPARENT = 0x20         # Permite que a janela seja clic√°vel atrav√©s de √°reas transparentes (modo passivo)
$LWA_ALPHA = 0x2                  # Define que a opacidade ser√° aplicada via canal alpha

$HWND_TOPMOST = [IntPtr]::op_Explicit(-1)    # Handle especial para manter janela no topo
$HWND_NOTOPMOST = [IntPtr]::op_Explicit(-2)  # Handle para remover "sempre no topo"
$HWND_BOTTOM = [IntPtr]::op_Explicit(1)      # Handle correto para enviar janela para o fundo
$HWND_NORMAL = [IntPtr]::Zero

$SWP_NOMOVE = 0x0002              # N√£o altera posi√ß√£o da janela
$SWP_NOSIZE = 0x0001              # N√£o altera tamanho da janela
$SWP_SHOWWINDOW = 0x0040          # Garante que a janela ser√° exibida ap√≥s altera√ß√£o
$SWP_NOZORDER = 0x0004            # N√£o altera ordem Z (adicionado para fix)
$SWP_FRAMECHANGED = 0x0020        # Notifica mudan√ßa de frame/estilo (NOVO: essencial para DWM)

# üå´Ô∏è Op√ß√µes globais de opacidade
$Global:opacityOptions = @(
  @{ Percentage = "10%"; Value = 26 },
  @{ Percentage = "20%"; Value = 51 },
  @{ Percentage = "30%"; Value = 77 },
  @{ Percentage = "40%"; Value = 102 },
  @{ Percentage = "50%"; Value = 128 },
  @{ Percentage = "60%"; Value = 153 },
  @{ Percentage = "70%"; Value = 179 },
  @{ Percentage = "80%"; Value = 204 },
  @{ Percentage = "90%"; Value = 230 },
  @{ Percentage = "100%"; Value = 255 }
)

function Get-UWPWindowHandle($process) {
  $processId = $process.Id
  $handles = [WinAPI]::GetWindowsByProcessId($processId)
  if ($handles.Count -eq 0) {
    Show-Error "‚®â Nenhuma janela vis√≠vel encontrada para o processo UWP"
    return $null
  }

  # Retorna o primeiro handle com t√≠tulo v√°lido
  foreach ($hWnd in $handles) {
    if ([WinAPI]::IsWindow($hWnd)) {
      # NOVO: Verifica se o handle √© v√°lido
      $title = [WinAPI]::GetWindowTitle($hWnd)
      if (-not [string]::IsNullOrWhiteSpace($title)) {
        Write-Host "‚óß Janela detectada: '$title'" -ForegroundColor DarkGray
        return $hWnd
      }
    }
  }

  Show-Error "‚®â N√£o foi poss√≠vel identificar uma janela com t√≠tulo v√°lido."
  return $null
}

# Obt√©m o identificador da janela (HWND) do processo selecionado
function Get-WindowHandle($process) {
  try {
    $handle = [IntPtr]$process.MainWindowHandle
    if ($handle -eq [IntPtr]::Zero) {
      throw "‚®â Janela n√£o possui MainWindowHandle."
    }
    # NOVO: Verifica validade
    if (-not [WinAPI]::IsWindow($handle)) {
      throw "‚®â Handle inv√°lido ou janela n√£o existe mais."
    }
    Write-Host "‚óß Handle obtido: '$($process.ProcessName)'" -ForegroundColor DarkGray
    return $handle
  }
  catch {
    Show-Error "‚®â Erro ao obter HWND." $_
    return $null
  }
}

function Set-WindowTransparency ($windowHandle, [byte]$opacityValue, [string]$Mode = "normal") {
  try {
    # NOVO: Verifica se o handle √© v√°lido
    if (-not [WinAPI]::IsWindow($windowHandle)) {
      throw "‚®â Handle de janela inv√°lido ou n√£o existe."
    }

       # Obt√©m os estilos estendidos atuais da janela
    $style = [WinAPI]::GetWindowLongPtr($windowHandle, $GWL_EXSTYLE)

    # Se o modo for "passive", adiciona WS_EX_TRANSPARENT para ignorar cliques
    if ($Mode -eq "passive") {
      $newStyle = $style -bor $WS_EX_TRANSPARENT
    }
    # Remove o estilo WS_EX_TRANSPARENT se estiver presente
    elseif ($Mode -eq "removeTransparent") {
      $newStyle = $style -band (-bnot $WS_EX_TRANSPARENT)
    }
    else {
      $newStyle = $style
    }

    # Aplica transpar√™ncia apenas se a janela j√° for camada (layered) ou se n√£o for modo de remo√ß√£o
    if (($newStyle -band $WS_EX_LAYERED) -ne 0 -or $Mode -eq "removeTransparent") {
      [WinAPI]::SetWindowLongPtr($windowHandle, $GWL_EXSTYLE, $newStyle) | Out-Null
    }
    else {
      # Se n√£o for layered, adiciona o estilo apenas para aplicar transpar√™ncia
      $newStyle = $newStyle -bor $WS_EX_LAYERED
      [WinAPI]::SetWindowLongPtr($windowHandle, $GWL_EXSTYLE, $newStyle) | Out-Null
    }

    # Aplica o n√≠vel de opacidade usando canal alpha
    [WinAPI]::SetLayeredWindowAttributes($windowHandle, 0, $opacityValue, $LWA_ALPHA) | Out-Null

    # NOVO: Notifica DWM da mudan√ßa de estilo com FRAMECHANGED (corrige propaga√ß√£o global)
    $windowFlags = $SWP_NOMOVE -bor $SWP_NOSIZE -bor $SWP_NOZORDER -bor $SWP_FRAMECHANGED
    [WinAPI]::SetWindowPos($windowHandle, $HWND_NORMAL, 0, 0, 0, 0, $windowFlags) | Out-Null

    # NOVO: For√ßa atualiza√ß√£o visual da janela (evita artefatos)
    [WinAPI]::UpdateWindow($windowHandle) | Out-Null

    return $true
  }
  catch {
    Show-Error "‚®â Erro ao aplicar transpar√™ncia via WinAPI." $_
    return $false
  }
}

function Select-OpacityLevel {
  # Usa a vari√°vel global de opacidade
  $options = $Global:opacityOptions

  # Exibe op√ß√µes para o usu√°rio
  Write-Host "`n‚óê Escolha o n√≠vel de opacidade:" -ForegroundColor Cyan
  for ($i = 0; $i -lt $options.Count; $i++) {
    $emojiIndex = Convert-ToEmojiNumber $i
    $percentage = $options[$i].Percentage
    Write-Host "$emojiIndex  $percentage" -ForegroundColor Gray
  }

  # Captura entrada do usu√°rio
  $selectedOpacityIndex = Read-Host "`n‚´ª Digite o n√∫mero da opacidade desejada ou pressione Enter para usar padr√£o (50%)"

  # Se vazio, retorna diretamente o objeto padr√£o (50%)
  if ([string]::IsNullOrWhiteSpace($selectedOpacityIndex)) {
    Write-Host "‚´ª Usando opacidade padr√£o: 50%" -ForegroundColor Yellow
    return $Global:opacityOptions[4]
  }

  # Valida entrada
  if ($selectedOpacityIndex -notmatch '^\d+$' -or [int]$selectedOpacityIndex -lt 0 -or [int]$selectedOpacityIndex -ge $options.Count) {
    Show-Error "‚®â √çndice inv√°lido. Tente novamente."
    return $null
  }

  # Retorna objeto com valor e texto
  return $options[$selectedOpacityIndex]
}

# Aplica transpar√™ncia √† janela selecionada com sele√ß√£o por √≠ndice e valores pr√©-definidos
function Apply-Transparency($windowHandle, $windowTitle) {
  $opacityChoice = Select-OpacityLevel
  if (-not $opacityChoice) { return }

  $opacityValue = $opacityChoice.Value
  $opacityText = $opacityChoice.Percentage

  # Aplica transpar√™ncia via WinAPI
  try {
    if (Set-WindowTransparency $windowHandle $opacityValue) {
      Write-Host "`n‚úì Transpar√™ncia aplicada √† janela '$windowTitle' com opacidade $opacityText." -ForegroundColor Green
    }
  }
  catch {
    Show-Error "‚®â Falha ao aplicar transpar√™ncia." $_
  }
}

# Define a janela como "sempre no topo" (topmost)
function Apply-TopMost($windowHandle, $windowTitle) {
  try {
    # NOVO: Adiciona FRAMECHANGED para consist√™ncia
    $topMostFlags = $SWP_NOMOVE -bor $SWP_NOSIZE -bor $SWP_SHOWWINDOW -bor $SWP_FRAMECHANGED
    [WinAPI]::SetWindowPos($windowHandle, $HWND_TOPMOST, 0, 0, 0, 0, $topMostFlags) | Out-Null
    [WinAPI]::ShowWindow($windowHandle, 5) | Out-Null  # SW_SHOW = 5
    Write-Host "`n‚Ü™ Janela '$windowTitle' fixada no topo." -ForegroundColor Green
  }
  catch {
    Show-Error "‚®â Falha ao fixar no topo com transpar√™ncia interativa." $_
  }
}

function Apply-PassiveTopMost($windowHandle, $windowTitle) {
  try {
    $opacityChoice = Select-OpacityLevel
    if (-not $opacityChoice) { return }

    $opacityValue = $opacityChoice.Value
    $opacityText = $opacityChoice.Percentage

    if (-not (Set-WindowTransparency $windowHandle $opacityValue "passive")) {
      return
    }

    Apply-TopMost $windowHandle $windowTitle

    # Exibe mensagem adicional sobre o modo passivo
    Write-Host "‚óØ Modo passivo ativado: janela '$windowTitle' n√£o captura cliques." -ForegroundColor DarkGray
  }
  catch {
    Show-Error "‚®â Erro ao aplicar modo passivo no topo." $_
  }
}

# Fun√ß√£o para desfazer "sempre no topo"
function Undo-TopMost($windowHandle, $windowTitle) {
  try {
    # Remove o estilo "sempre no topo", sem alterar posi√ß√£o ou tamanho
    $undoTopMostFlags = $SWP_NOMOVE -bor $SWP_NOSIZE -bor $SWP_SHOWWINDOW -bor $SWP_FRAMECHANGED  # NOVO: Adiciona FRAMECHANGED
    [WinAPI]::SetWindowPos($windowHandle, $HWND_NOTOPMOST, 0, 0, 0, 0, $undoTopMostFlags) | Out-Null
    # Envia a janela para o fundo
    [WinAPI]::SetWindowPos($windowHandle, $HWND_BOTTOM, 0, 0, 0, 0, $undoTopMostFlags) | Out-Null
    # Minimiza a janela ap√≥s envi√°-la para o fundo
    [WinAPI]::ShowWindow($windowHandle, 6) | Out-Null  # SW_MINIMIZE = 6
    Write-Host "`n‚Ü© 'Sempre no topo' desfeito, janela enviada para baixo e minimizada: '$windowTitle'." -ForegroundColor Green
  }
  catch {
    Show-Error "‚®â Falha ao desfazer 'sempre no topo'." $_
  }
}

function Undo-PassiveTopMost($windowHandle, $windowTitle) {
  try {
    # Remove WS_EX_TRANSPARENT e restaura opacidade total
    $opacityIn100Percent = $Global:opacityOptions[9].Value
    Set-WindowTransparency $windowHandle $opacityIn100Percent "removeTransparent"

    Undo-TopMost $windowHandle $windowTitle

    # Exibe mensagem de sucesso
    Write-Host "`n‚óØ Modo passivo desfeito. Janela '$windowTitle' voltou ao comportamento normal." -ForegroundColor DarkGray
  }
  catch {
    # Exibe mensagem de erro em caso de falha
    Show-Error "‚®â Erro ao desfazer modo passivo." $_
  }
}

# Fun√ß√£o centralizada para exibir mensagens de erro
function Show-Error($message, $detail = $null) {
  Write-Host "`n‚®â $message" -ForegroundColor Red
  if ($detail) {
    Write-Host "    Detalhe: $detail" -ForegroundColor DarkRed
  }
}
